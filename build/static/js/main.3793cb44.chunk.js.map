{"version":3,"sources":["components/AddForm.js","components/Person.js","components/Persons.js","components/Filter.js","components/Notification.js","services/phonebook.js","App.js","serviceWorker.js","index.js"],"names":["AddForm","addNew","newName","newNumber","handleNameChange","handleNumberChange","onSubmit","value","onChange","type","Person","person","deletePerson","name","number","onClick","Persons","phonebookList","map","key","id","Filter","filter","handleFilterChange","Notification","msg","error","className","baseUrl","axios","get","then","res","data","newObj","post","put","delete","App","useState","persons","setPersons","setNewName","setNewNumber","setFilter","setMsg","setError","msgTimeout","setTimeout","errorTimeout","useEffect","phonebookService","initialPersons","catch","e","p","toLowerCase","includes","target","preventDefault","newPerson","existingPerson","find","window","confirm","changedPerson","returnedPerson","concat","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"oOA0BeA,EAxBC,SAAC,GAMV,IALLC,EAKI,EALJA,OACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,iBACAC,EACI,EADJA,mBAEA,OACE,oCACE,0BAAMC,SAAUL,GACd,sCACQ,2BAAOM,MAAOL,EAASM,SAAUJ,KAEzC,wCACU,2BAAOG,MAAOJ,EAAWK,SAAUH,KAE7C,6BACE,4BAAQI,KAAK,UAAb,WCFKC,EAfA,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,aACxB,OACE,+BACE,4BACE,4BACGD,EAAOE,KADV,IACiBF,EAAOG,QAExB,4BACE,4BAAQC,QAASH,GAAjB,cCOKI,EAdC,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,cAAeL,EAAmB,EAAnBA,aAChC,OACE,+BACGK,EAAcC,KAAI,SAACP,GAAD,OACjB,kBAAC,EAAD,CACEQ,IAAKR,EAAOS,GACZT,OAAQA,EACRC,aAAc,kBAAMA,EAAaD,WCC5BU,EATA,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,OAAQC,EAAyB,EAAzBA,mBACxB,OACE,wDAC2B,IACzB,2BAAOhB,MAAOe,EAAQd,SAAUe,MCOvBC,EAXM,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,IAAKC,EAAY,EAAZA,MAC3B,OAAY,OAARD,GAA0B,OAAVC,EACX,KAELD,EACK,yBAAKE,UAAU,OAAOF,GAEtB,yBAAKE,UAAU,SAASD,I,gBCR7BE,EAAU,eAkBD,EAhBA,WACb,OAAOC,IAAMC,IAAIF,GAASG,MAAK,SAACC,GAAD,OAASA,EAAIC,SAe/B,EAZA,SAACC,GACd,OAAOL,IAAMM,KAAKP,EAASM,GAAQH,MAAK,SAACC,GAAD,OAASA,EAAIC,SAWxC,EARA,SAACb,EAAIc,GAClB,OAAOL,IAAMO,IAAN,UAAaR,EAAb,YAAwBR,GAAMc,GAAQH,MAAK,SAACC,GAAD,OAASA,EAAIC,SAOlD,EAJA,SAACb,GACd,OAAOS,IAAMQ,OAAN,UAAgBT,EAAhB,YAA2BR,KCiJrBkB,G,MAzJH,WAAO,IAAD,EACcC,mBAAS,IADvB,mBACTC,EADS,KACAC,EADA,OAEcF,mBAAS,IAFvB,mBAETrC,EAFS,KAEAwC,EAFA,OAGkBH,mBAAS,IAH3B,mBAGTpC,EAHS,KAGEwC,EAHF,OAIYJ,mBAAS,IAJrB,mBAITjB,EAJS,KAIDsB,EAJC,OAKML,mBAAS,MALf,mBAKTd,EALS,KAKJoB,EALI,OAMUN,mBAAS,MANnB,mBAMTb,EANS,KAMFoB,EANE,KASVC,EAAa,WACjBC,YAAW,WACTH,EAAO,QACN,MAGCI,EAAe,WACnBD,YAAW,WACTF,EAAS,QACR,MAILI,qBAAU,WACRC,IAEGpB,MAAK,SAACqB,GACLX,EAAWW,MAEZC,OAAM,SAACC,GACNR,EAAS,0DACTG,SAEH,IAGH,IAeMhC,EACO,KAAXK,EACIkB,EAAQlB,QACN,SAACiC,GAAD,OACEA,EAAE1C,KAAK2C,cAAcC,SAASnC,EAAOkC,gBACrCD,EAAEzC,OAAO0C,cAAcC,SAASnC,EAAOkC,kBAE3ChB,EA6EN,OACE,6BACE,yCACA,kBAAC,EAAD,CAAcf,IAAKA,EAAKC,MAAOA,IAC/B,kBAAC,EAAD,CAAQJ,OAAQA,EAAQC,mBA7FD,SAAC+B,GAC1BV,EAAUU,EAAEI,OAAOnD,UA6FjB,yCACA,kBAAC,EAAD,CACEN,OAjFS,SAACqD,GACdA,EAAEK,iBACF,IAAMC,EAAY,CAChB/C,KAAMX,EACNY,OAAQX,GAGJ0D,EAAiBrB,EAAQsB,MAC7B,SAACP,GAAD,OAAOA,EAAE1C,KAAK2C,gBAAkBtD,EAAQsD,iBAEtCK,EAEAE,OAAOC,QAAP,UACK9D,EADL,+FAKAiD,EACUU,EAAezC,GAAIwC,GAC1B7B,MAAK,SAACkC,GACLxB,EACED,EAAQtB,KAAI,SAACP,GAAD,OACVA,EAAOS,KAAOyC,EAAezC,GAAKT,EAASsD,MAG/CpB,EAAO,sBAAD,OAAuBgB,EAAehD,KAAtC,aAA+CV,EAA/C,MACN4C,OAEDM,OAAM,SAACC,GACNR,EAAS,qBAAD,OACee,EAAehD,KAD9B,4CAGRoC,IACAR,EAAWD,EAAQlB,QAAO,SAACiC,GAAD,OAAOA,EAAEnC,KAAOyC,EAAezC,UAK/D+B,EACUS,GACP7B,MAAK,SAACmC,GACLzB,EAAWD,EAAQ2B,OAAOD,IAC1BrB,EAAO,SAAD,OAAUqB,EAAerD,KAAzB,uBACNkC,OAEDM,OAAM,SAACC,GACNR,EAAS,+DAGTG,OAGNP,EAAW,IACXC,EAAa,KA6BTzC,QAASA,EACTC,UAAWA,EACXC,iBA7GmB,SAACkD,GACxBZ,EAAWY,EAAEI,OAAOnD,QA6GhBF,mBAzGqB,SAACiD,GAC1BX,EAAaW,EAAEI,OAAOnD,UA0GpB,uCACA,kBAAC,EAAD,CAASU,cAAeA,EAAeL,aA/BtB,SAACD,GAChBoD,OAAOC,QAAP,iCAAyCrD,EAAOE,QAClDsC,EACUxC,EAAOS,IACdW,MAAK,WACJU,EAAWD,EAAQlB,QAAO,SAACiC,GAAD,OAAOA,EAAEnC,KAAOT,EAAOS,OACjDyB,EAAO,WAAD,OAAYlC,EAAOE,KAAnB,yBACNkC,OAEDM,OAAM,SAACC,GACNR,EAAS,GAAD,OAAInC,EAAOE,KAAX,4CACRoC,IACAR,EAAWD,EAAQlB,QAAO,SAACiC,GAAD,OAAOA,EAAEnC,KAAOT,EAAOS,gBC7HvCgD,QACW,cAA7BL,OAAOM,SAASC,UAEe,UAA7BP,OAAOM,SAASC,UAEhBP,OAAOM,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEd5B,OAAM,SAAA3B,GACLwD,QAAQxD,MAAMA,EAAMyD,c","file":"static/js/main.3793cb44.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst AddForm = ({\r\n  addNew,\r\n  newName,\r\n  newNumber,\r\n  handleNameChange,\r\n  handleNumberChange,\r\n}) => {\r\n  return (\r\n    <>\r\n      <form onSubmit={addNew}>\r\n        <div>\r\n          Name: <input value={newName} onChange={handleNameChange} />\r\n        </div>\r\n        <div>\r\n          Number: <input value={newNumber} onChange={handleNumberChange} />\r\n        </div>\r\n        <div>\r\n          <button type=\"submit\">Add</button>\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddForm;\r\n","import React from \"react\";\r\n\r\nconst Person = ({ person, deletePerson }) => {\r\n  return (\r\n    <tbody>\r\n      <tr>\r\n        <td>\r\n          {person.name} {person.number}\r\n        </td>\r\n        <td>\r\n          <button onClick={deletePerson}>Delete</button>\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n  );\r\n};\r\n\r\nexport default Person;\r\n","import React from \"react\";\r\nimport Person from \"./Person\";\r\n\r\nconst Persons = ({ phonebookList, deletePerson }) => {\r\n  return (\r\n    <table>\r\n      {phonebookList.map((person) => (\r\n        <Person\r\n          key={person.id}\r\n          person={person}\r\n          deletePerson={() => deletePerson(person)}\r\n        />\r\n      ))}\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default Persons;\r\n","import React from \"react\";\r\n\r\nconst Filter = ({ filter, handleFilterChange }) => {\r\n  return (\r\n    <div>\r\n      Filter by name or number{\" \"}\r\n      <input value={filter} onChange={handleFilterChange}></input>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import React from \"react\";\r\n\r\nconst Notification = ({ msg, error }) => {\r\n  if (msg === null && error === null) {\r\n    return null;\r\n  }\r\n  if (msg) {\r\n    return <div className=\"msg\">{msg}</div>;\r\n  } else {\r\n    return <div className=\"error\">{error}</div>;\r\n  }\r\n};\r\n\r\nexport default Notification;\r\n","import axios from \"axios\";\r\nconst baseUrl = '/api/persons';\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl).then((res) => res.data);\r\n};\r\n\r\nconst create = (newObj) => {\r\n  return axios.post(baseUrl, newObj).then((res) => res.data);\r\n};\r\n\r\nconst update = (id, newObj) => {\r\n  return axios.put(`${baseUrl}/${id}`, newObj).then((res) => res.data);\r\n};\r\n\r\nconst remove = (id) => {\r\n  return axios.delete(`${baseUrl}/${id}`);\r\n};\r\n\r\nexport default {\r\n  getAll,\r\n  create,\r\n  update,\r\n  remove,\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport AddForm from \"./components/AddForm\";\nimport Persons from \"./components/Persons\";\nimport Filter from \"./components/Filter\";\nimport Notification from \"./components/Notification\";\nimport phonebookService from \"./services/phonebook\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [filter, setFilter] = useState(\"\");\n  const [msg, setMsg] = useState(null);\n  const [error, setError] = useState(null);\n\n  //show notification msg for 3 sec\n  const msgTimeout = () => {\n    setTimeout(() => {\n      setMsg(null);\n    }, 3000);\n  };\n  //show error msg for 5 sec\n  const errorTimeout = () => {\n    setTimeout(() => {\n      setError(null);\n    }, 5000);\n  };\n\n  //get persons data from json server\n  useEffect(() => {\n    phonebookService\n      .getAll()\n      .then((initialPersons) => {\n        setPersons(initialPersons);\n      })\n      .catch((e) => {\n        setError(`Request failure. Unable to fetch data from the server.`);\n        errorTimeout();\n      });\n  }, []);\n\n  //name input\n  const handleNameChange = (e) => {\n    setNewName(e.target.value);\n  };\n\n  //number input\n  const handleNumberChange = (e) => {\n    setNewNumber(e.target.value);\n  };\n\n  //filter input\n  const handleFilterChange = (e) => {\n    setFilter(e.target.value);\n  };\n\n  //check if list needs to be filtered or not\n  const phonebookList =\n    filter !== \"\"\n      ? persons.filter(\n          (p) =>\n            p.name.toLowerCase().includes(filter.toLowerCase()) ||\n            p.number.toLowerCase().includes(filter.toLowerCase())\n        )\n      : persons;\n\n  //add new person to the phonebook\n  const addNew = (e) => {\n    e.preventDefault();\n    const newPerson = {\n      name: newName,\n      number: newNumber,\n    };\n    //check if person already exists in the phonebook\n    const existingPerson = persons.find(\n      (p) => p.name.toLowerCase() === newName.toLowerCase()\n    );\n    if (existingPerson) {\n      if (\n        window.confirm(\n          `${newName} is already added to the Phonebook. Do you want to replace the old number with a new one?`\n        )\n      ) {\n        //update the number for existing person\n        phonebookService\n          .update(existingPerson.id, newPerson)\n          .then((changedPerson) => {\n            setPersons(\n              persons.map((person) =>\n                person.id !== existingPerson.id ? person : changedPerson\n              )\n            );\n            setMsg(`Updated number for ${existingPerson.name}: ${newNumber} `);\n            msgTimeout();\n          })\n          .catch((e) => {\n            setError(\n              `Unable to update. ${existingPerson.name} is already deleted from the Phonebook.`\n            );\n            errorTimeout();\n            setPersons(persons.filter((p) => p.id !== existingPerson.id));\n          });\n      }\n    } else {\n      //add new person to the phonebook\n      phonebookService\n        .create(newPerson)\n        .then((returnedPerson) => {\n          setPersons(persons.concat(returnedPerson));\n          setMsg(`Added ${returnedPerson.name} to the Phonebook.`);\n          msgTimeout();\n        })\n        .catch((e) => {\n          setError(\n            `Request failure. Unable to add new person to the Phonebook.`\n          );\n          errorTimeout();\n        });\n    }\n    setNewName(\"\");\n    setNewNumber(\"\");\n  };\n\n  //delete person from the phonebook\n  const deletePerson = (person) => {\n    if (window.confirm(`Do you want to delete: ${person.name}`)) {\n      phonebookService\n        .remove(person.id)\n        .then(() => {\n          setPersons(persons.filter((p) => p.id !== person.id));\n          setMsg(`Deleted ${person.name} from the Phonebook.`);\n          msgTimeout();\n        })\n        .catch((e) => {\n          setError(`${person.name} is already deleted from the Phonebook.`);\n          errorTimeout();\n          setPersons(persons.filter((p) => p.id !== person.id));\n        });\n    }\n  };\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <Notification msg={msg} error={error} />\n      <Filter filter={filter} handleFilterChange={handleFilterChange} />\n      <h2>Add a New</h2>\n      <AddForm\n        addNew={addNew}\n        newName={newName}\n        newNumber={newNumber}\n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n      />\n      <h2>Numbers</h2>\n      <Persons phonebookList={phonebookList} deletePerson={deletePerson} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}